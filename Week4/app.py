# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pk0Yzqc3kESr6hu3G80wTypAkBm9Giii
"""

from flask import Flask, request, render_template
import numpy as np
import pandas as pd


from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
import pickle

from sklearn.datasets import load_wine

data = load_wine() # Load wine dataset
df = pd.DataFrame(data=data.data, columns=data.feature_names)
df['target'] = pd.Categorical.from_codes(data.target, categories=data.target_names)


#"""Visualizations"""

#import pandas as pd
#import matplotlib.pyplot as plt
#import seaborn as sns

#sns.pairplot(df, hue='target')
#plt.show()

#plt.figure(figsize=(10, 6))
#sns.boxplot(x='target', y='alcohol', data=df)
#plt.title('Alcohol Content by Wine Class')
#plt.show()

#plt.figure(figsize=(10, 6))
#sns.violinplot(x='target', y='malic_acid', data=df)
#plt.title('Malic Acid Content by Wine Class')
#plt.show()


X = df.drop(['target'], axis=1)
y = df['target']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, train_size=0.70,test_size=0.30, random_state=0)
print(X_train.shape, X_test.shape)

randomForestClassifier = RandomForestClassifier(n_estimators=100, random_state=0)
randomForestClassifier.fit(X_train, y_train)

print('Random Forest Classifier')
print('Accuracy:', metrics.accuracy_score(y_test, randomForestClassifier.predict(X_test)))
print('Precision:', metrics.precision_score(y_test, randomForestClassifier.predict(X_test), average='weighted'))
print('Recall:', metrics.recall_score(y_test, randomForestClassifier.predict(X_test), average='weighted'))
print('F1-score:', metrics.f1_score(y_test, randomForestClassifier.predict(X_test), average='weighted'))


with open('random_forest.pkl', 'wb') as file:
       pickle.dump(randomForestClassifier, file)

app = Flask(__name__, template_folder='templates')

with open('random_forest.pkl', 'rb') as file:
    randomForestClassifier = pickle.load(file)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    int_features = [float(x) for x in request.form.values()]
    final_features = [np.array(int_features)]

    rfc_prediction = randomForestClassifier.predict(final_features)[0]

    return render_template('index.html',
                           rfc_prediction=rfc_prediction)

if __name__ == "__main__":
    app.run(port=5000, debug=True)